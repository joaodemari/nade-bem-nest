generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Branch {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  apiKey       String        @unique
  url           String       @unique
  logoUrl     String
  swimmers     Swimmer[]
  levels       Level[]
  periods      Period[]
  branchTeachers BranchTeacher[]
  enterprise    Enterprise?    @relation(fields: [enterpriseId], references: [id])
  enterpriseId  String?        @db.ObjectId

  Responsible Responsible[]
}

model BranchTeacher{
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  branch       Branch        @relation(fields: [branchId], references: [id])
  branchId     String        @db.ObjectId
  teacher      Teacher       @relation(fields: [teacherId], references: [id])
  teacherId    String        @db.ObjectId
  teacherNumber Int 

   @@unique([branchId, teacherNumber])
}

model Teacher {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  photoUrl      String?
  active        Boolean   @default(true)
  password      String?
  resetToken    String?   @unique
  auth          Auth? @relation(fields: [authId], references: [id])
  authId        String? @db.ObjectId @unique
  Report        Report[]
  swimmers      Swimmer[]
  branchTeachers      BranchTeacher[]

  TeacherPeriodGroupSelection TeacherPeriodGroupSelection[] 

  @@unique([id, authId])
}

model Auth {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  email     String @unique
  password  String
  resetToken String? @unique
  teacher   Teacher?
  admin     Admin?
  role      String
  name      String
  Responsible Responsible?
  sessions   Session[]
}

model Session{
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  token     String @unique
  createdAt DateTime  @default(now())
  auth      Auth @relation(fields: [authId], references: [id])
  authId    String @db.ObjectId
}

model Responsible{
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  auth      Auth @relation(fields: [authId], references: [id])
  authId    String @db.ObjectId @unique
  swimmers  Swimmer[]
  branch    Branch @relation(fields: [branchId], references: [id])
  branchId  String @db.ObjectId
}

model Admin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  auth          Auth @relation(fields: [authId], references: [id])
  authId        String @db.ObjectId @unique
 
  enterprise Enterprise @relation(fields: [enterpriseId], references: [id])
  enterpriseId String @db.ObjectId
}

model Enterprise{
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  branches Branch[]
  admin    Admin[]
  
}

model Period {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  startDate DateTime
  endDate   DateTime
  report    Report[]
  Branch    Branch?  @relation(fields: [branchId], references: [id])
  branchId  String?  @db.ObjectId

  TeacherPeriodGroupSelection TeacherPeriodGroupSelection[] 
}

model Swimmer {
  id           String @id @default(auto()) @map("_id") @db.ObjectId

  actualLevel     Level  @relation(fields: [actualLevelName], references: [name])
  actualLevelName String

  isActive Boolean @default(true)

  name       String
  photoUrl   String?
  lastAccess DateTime?

  Report       Report[] @relation(name: "SwimmerReports")
  // lastReport   DateTime?
  // lastReportId String?   @db.ObjectId @unique
  // lastReportAccess Report? @relation(fields: [lastReportId], references: [id], name: "SwimmerLastReport") 

  Teacher       Teacher? @relation(fields: [teacherId], references: [id])
  teacherId     String?    @db.ObjectId  @unique

  Branch        Branch      @relation(fields: [branchId], references: [id])
  branchId      String      @db.ObjectId

  //TODO: Remove the unique 
  memberNumber Int  @unique 
  memberNumberStr String 

  responsibleId String? @db.ObjectId
  Responsible   Responsible? @relation(fields: [responsibleId], references: [id])  

  periodTeacherSelections SwimmerPeriodTeacherSelection[]
}

model TeacherPeriodGroupSelection{
  id String @id @default(auto()) @map("_id") @db.ObjectId

  period Period @relation(fields: [periodId], references: [id])
  periodId String @db.ObjectId
   
  teacher Teacher @relation(fields: [teacherId, teacherAuthId], references: [id, authId])
  teacherId String @db.ObjectId
  teacherAuthId String @db.ObjectId
  swimmerSelections SwimmerPeriodTeacherSelection[]

  @@unique([teacherId, periodId])
  @@unique([teacherAuthId, periodId])
  @@unique([id, periodId])
}

model SwimmerPeriodTeacherSelection{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  swimmer Swimmer @relation(fields: [swimmerId], references: [id])
  swimmerId String @db.ObjectId

  teacherPeriodGroupSelection TeacherPeriodGroupSelection @relation(fields: [teacherPeriodGroupSelectionId, periodId], references: [id, periodId]) 
  teacherPeriodGroupSelectionId String @db.ObjectId 
  periodId String @db.ObjectId

  @@unique([swimmerId, periodId])
  @@unique([teacherPeriodGroupSelectionId, swimmerId])

  Report Report?
}

model Report {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  approved  Boolean

  observation String

  isAvailable Boolean @default(false)

  level          Level            @relation(fields: [levelId], references: [id])
  levelId        String           @db.ObjectId
  ReportAndSteps ReportAndSteps[]

  // SwimmerLastReport Swimmer? @relation(name: "SwimmerLastReport")

  swimmer   Swimmer? @relation(fields: [idSwimmer], references: [id], name: "SwimmerReports", onDelete: NoAction, onUpdate: NoAction)
  idSwimmer String?  @db.ObjectId
  teacher   Teacher? @relation(fields: [idTeacher], references: [id])
  idTeacher String?  @db.ObjectId

  Period   Period? @relation(fields: [periodId], references: [id])
  periodId String? @db.ObjectId

  swimmerTeacherPeriodSelection SwimmerPeriodTeacherSelection? @relation(fields: [swimmerTeacherPeriodSelectionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  swimmerTeacherPeriodSelectionId String? @db.ObjectId @unique
}

model ReportAndSteps {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  report   Report @relation(fields: [reportId], references: [id])
  step     Step   @relation(fields: [stepId], references: [id])
  reportId String @db.ObjectId
  stepId   String @db.ObjectId
}

model Level {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  levelNumber Int       @unique
  areas       Area[]
  Report      Report[]
  swimmers    Swimmer[]
  Branch      Branch?   @relation(fields: [branchId], references: [id])
  branchId    String?   @db.ObjectId
}

model Area {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  steps    Step[]
  Level    Level?  @relation(fields: [levelId], references: [id])
  levelId  String? @db.ObjectId
}

model Step {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  description    String
  points         Int
  Area           Area             @relation(fields: [areaId], references: [id])
  areaId         String           @db.ObjectId
  ReportAndSteps ReportAndSteps[]
}

